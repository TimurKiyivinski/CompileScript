#!/bin/bash
# Stop judging, I just need to learn bash!

# Bash colors
txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
txtrst='\e[0m'    # Text Reset

# Commands
commands[0]="clean"
commands[1]="pipe"
commands[2]="time"
commands[3]="pipetime"
commands[4]="mem"
commands[5]="make"
commands[6]="makeline"

# File types
files[0]="c"
files[1]="cpp"
files[2]="java"
files[3]="rs"
files[4]="pl"

# Variables
# Read RC file or use defaults
if [[ -f ~/.compilerc ]]
then
    source "$HOME/.compilerc"
fi
# Set unset variables to default
[[ -z $GCC_FLAGS ]] && GCC_FLAGS="-std=c99"
[[ -z $GPP_FLAGS ]] && GPP_FLAGS="-std=c++0x"
[[ -z $JAVAC_FLAGS ]] && JAVAC_FLAGS=""
[[ -z $RUSTC_FLAGS ]] && RUSTC_FLAGS=""
[[ -z $clean_files ]] && clean_files="*.out *.bin *~ *.o *.pyc"
[[ -z $vlean_files ]] && vlean_files="*~"
[[ -z $vrm_options ]] && vrm_options="-i"

# Functions
in_array() {
    # $1 = Value
    # $2 = Array to check
    argument_var="${1}"
    shift
    argument_arr=("${@}")
    for element in ${argument_arr[@]};
    do
        if [[ "$element" == $argument_var ]]
        then
            echo $element
            return 0
        fi
    done
    return 1
}

do_action() {
    if [[ $1 == "clean" ]]
    then
        if [[ $2 == "-r" ]]
        then
            for clean_type in $vlean_files
            do
                echo $clean_type
                find "$(pwd)" -name "$clean_type" -exec rm $vrm_options {} \;
            done
        else
            echo -e "$txtylw""Cleaning.""$txtrst"
            rm -rfv $clean_files
        fi
    elif [[ $1 == "make" ]]
    then
        if [[ -f "$(pwd)/makefile" ]]
        then
            echo -e "$txtylw""Running make""$txtrst"
            make
        else
            echo -e "$txtylw""Placing makefile.""$txtrst"
            cp ~/Templates/makefile "$(pwd)"
        fi
    elif [[ $1 == "makeline" ]]
    then
        for header in "$(pwd)/*.h"
        do
            object=$(basename "$header")
            echo -e "$txtylw""Libraries:""$txtrst"
            echo ${object/.h/.o}
            echo -e "$txtred""Add to makefile.""$txtrst"
        done
    elif [[ $1 == "pipe" ]]
    then
        echo -e "$txtylw""cat $2 | ./$3""$txtrst"
        cat "$2" | ./"$3"
    elif [[ $1 == "time" ]]
    then
        echo -e "$txtylw""Timing $2""$txtrst"
        time ./"$2"
    elif [[ $1 == "pipetime" ]]
    then
        time cat "$2" | ./"$3"
    elif [[ $1 == "mem" ]]
    then
        echo -e "$txtylw""Testing $2 for memory leaks.""$txtrst"
        if which valgrind >/dev/null;
        then
            valgrind ./"$2" ${@:3}
        else
            echo -e "$txtred""Please install valgrind.""$txtrst"
        fi
    fi
}

do_compile() {
    # $1 = File
    # Get file name and extension
    filename=$(basename "$1")
    extension="${filename##*.}"
    echo -e "$txtblu""File type: ""$txtylw""$extension""$txtrst"
    if [[ $extension == 'c' ]]
    then
        echo -e "$txtylw""Using flags: $GCC_FLAGS""$txtrst"
        gcc "$filename" -o "${filename/$extension/bin}" $GCC_FLAGS
    elif [[ $extension == 'cpp' ]]
    then
        echo -e "$txtylw""Using flags: $GPP_FLAGS""$txtrst"
        g++ "$filename" -o "${filename/$extension/bin}" $GPP_FLAGS
    elif [[ $extension == 'java' ]]
    then
        echo -e "$txtylw""Using flags: $JAVAC_FLAGS""$txtrst"
        javac "$filename" $JAVAC_FLAGS
    elif [[ $extension == 'rs' ]]
    then
        echo -e "$txtylw""Using flags: $RUSTC_FLAGS""$txtrst"
        rustc "$filename" $RUSTC_FLAGS
    elif [[ $extension == 'pl' ]]
    then
        gplc "$filename"
    fi
}

do_help() {
    echo -e "$txtgrn""Lazy compile script""$txtrst"
    echo -e "$txtblu""Syntax:""$txtrst"
    echo -e "$txtgrn""Compile a file:""$txtrst"
    echo -e "$txtblu""compile ""$txtpur""file.{c,cpp,java,pl}""$txtrst"
    echo -e "$txtgrn""Place a makefile in working directory:""$txtrst"
    echo -e "$txtblu""compile ""$txtylw""make""$txtrst"
    echo -e "$txtgrn""List all object files to add to makefile:""$txtrst"
    echo -e "$txtblu""compile ""$txtylw""makeline""$txtrst"
    echo -e "$txtgrn""Clean working directory:""$txtrst"
    echo -e "$txtblu""compile ""$txtylw""clean""$txtrst"
    echo -e "$txtgrn""Clean working directory recursively:""$txtrst"
    echo -e "$txtblu""compile ""$txtylw""clean -r""$txtrst"
    echo -e "$txtgrn""Pipe file to an executable:""$txtrst"
    echo -e "$txtblu""compile ""$txtylw""pipe ""$txtpur""file.txt file.bin""$txtrst"
    echo -e "$txtgrn""Time an executable:""$txtrst"
    echo -e "$txtblu""compile ""$txtylw""time ""$txtpur""file.bin""$txtrst"
    echo -e "$txtgrn""Time and pipe to an executable:""$txtrst"
    echo -e "$txtblu""compile ""$txtylw"" pipetime ""$txtpur""file.txt file.bin""$txtrst"
    echo -e "$txtgrn""Test executable for memory leaks:""$txtrst"
    echo -e "$txtblu""compile ""$txtylw""mem ""$txtpur""file.bin""$txtrst"
}

# Test script action
if [[ $(in_array "$1" "${commands[@]}") ]]
then
    # Run the appropriate action
    echo -e "$txtblu"Action: "$txtgrn""$1""$txtrst"
    do_action "$@"
elif [[ $(in_array "${1##*.}" "${files[@]}") ]] 
then
    echo  -e "$txtblu""Compiling file: ""$txtpur""$1""$txtrst"
    do_compile "$@"
else
    do_help
fi
